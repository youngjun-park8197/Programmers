!! 주어진 문제는 해결했으나, 다른 테스트 케이스에서는 실패

#include <string>
#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;

vector<int> solution(vector<int> array, vector<vector<int>> commands) {
    vector<int> answer;
    
    vector<int> idx_i;  // i 값 벡터 저장
    vector<int> idx_j;  // j 값 벡터 저장
    vector<int> idx_k;  // k 값 벡터 저장
    
    vector<int> temp;
    
    for(int i = 0; i < commands.size(); i++) {
        idx_i.push_back(commands[i][0]);
        idx_j.push_back(commands[i][1]);
        idx_k.push_back(commands[i][2]); 
    }
    
    int index = 0;
    
    while(index < 3) {
        // commands의 i, j 인덱스에 해당하는 값을 array의 인덱스로 설정하고 그 범위 내의 값을 temp에 적재
        temp.assign(array.begin() + idx_i[index] - 1, array.begin() + idx_j[index]);
        
        // 적재한 temp 배열 값 정렬
        sort(temp.begin(), temp.end());
        
        // temp 배열 내에서 k번째 있는 값을 찾음
        for(int i = 0; i < temp.size(); i++) {
            if(i == idx_k[index] - 1) {
                answer.push_back(temp[i]);
            }
        }
        temp.erase(temp.begin(), temp.end());
        index++;
    }    
    return answer;
}

#####################################################################################################

!! 새롭게 수정해서 해결한 답 (자체 해결)

#include <string>
#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;

vector<int> solution(vector<int> array, vector<vector<int>> commands) {
    vector<int> answer;
    vector<int> temp;
    
    
    for(int i = 0; i < commands.size(); i++) {
        temp.assign(array.begin() + commands[i][0] - 1, array.begin() + commands[i][1]);
        sort(temp.begin(), temp.end());
        answer.push_back(temp.at(commands[i][2] - 1));
        temp.erase(temp.begin(), temp.end());
    }
    
    return answer;
}

#####################################################################################################

* K번째수

* 문제 설명
배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.
예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면

array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다.
1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다.
2에서 나온 배열의 3번째 숫자는 5입니다.
배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, 
commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요.

* 제한사항
array의 길이는 1 이상 100 이하입니다.
array의 각 원소는 1 이상 100 이하입니다.
commands의 길이는 1 이상 50 이하입니다.
commands의 각 원소는 길이가 3입니다.

* 입출력 예
        array	                       commands	             return
[1, 5, 2, 6, 3, 7, 4]	[[2, 5, 3], [4, 4, 1], [1, 7, 3]]	[5, 6, 3]

[1, 5, 2, 6, 3, 7, 4]를 2번째부터 5번째까지 자른 후 정렬합니다. [2, 3, 5, 6]의 세 번째 숫자는 5입니다.
[1, 5, 2, 6, 3, 7, 4]를 4번째부터 4번째까지 자른 후 정렬합니다. [6]의 첫 번째 숫자는 6입니다.
[1, 5, 2, 6, 3, 7, 4]를 1번째부터 7번째까지 자릅니다. [1, 2, 3, 4, 5, 6, 7]의 세 번째 숫자는 3입니다.


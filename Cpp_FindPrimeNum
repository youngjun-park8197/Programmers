#include <string>
#include <vector>
#include <iostream>
#include <algorithm>
#include <cmath>

using namespace std;

int solution(int n) {
    int answer = 0;
    vector<int> numVec(n+1);

    for(int i = 2; i <= n; i++) {
        numVec[i] = i;          // n 수까지 정수를 벡터에 대입
    }
    
    for(int i = 2; i <= n; i++) {
        for(int j = 2 * i; j <= n; j = j + i) {    // 2의 배수에 해당하는 벡터 인덱스의 값을 0으로 한다
            numVec[j] = 0;                         // 2의 배수 중에 2를 제외한 모든 값 소수가 아님
        }                                       
    }
    
    for(int i = 0; i <= n; i++) {
        if(numVec[i] != 0) {            // 0값이 들어가 있지 않은 값이 소수
            answer++;
        }
    }
    
    return answer;
}


################################################################################################

* 소수 찾기

* 문제 설명
1부터 입력받은 숫자 n 사이에 있는 소수의 개수를 반환하는 함수, solution을 만들어 보세요.

소수는 1과 자기 자신으로만 나누어지는 수를 의미합니다.
(1은 소수가 아닙니다.)

* 제한 조건
n은 2이상 1000000이하의 자연수입니다.

* 입출력 예
  n	    result
  10	    4
  5	      3

* 입출력 예 #1
1부터 10 사이의 소수는 [2,3,5,7] 4개가 존재하므로 4를 반환

* 입출력 예 #2
1부터 5 사이의 소수는 [2,3,5] 3개가 존재하므로 3를 반환
